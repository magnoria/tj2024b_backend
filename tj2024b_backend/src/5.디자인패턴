[디자인 패턴]
	- 패턴이란?
	- 소프트웨어 설계 과정에서 자주 사용하는 설계유형
	- 종류
		1. 싱글톤 패턴
		2. MVC 패턴
		
[싱글톤 패턴]
	1. 정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 패턴/설계
	2. 목적 : 하나의 객체(인스턴스)를 만들고 메모리 공유
		- 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
		- 협업에 있어서 굳이 여러개의 객체(인스턴스)가 필요없는경우, 기능역할 1개일때
	3. 싱글톤 만들기
		단계1 : 디폴트 생성자를 private로 한다.
			private 생성자명(){}
			
		단계2 : 지정한 클래스에 private static 으로 객체(인스턴스) 선언하기
			private static 클래스명 멤버변수 = new 생성자명();
			
		단계3 : 지정한 클래스에 public static 클래스명 getInstance 메소드를 선언한다.
			public static 반환타입 getInstance(){
				return this.멤버변수; -> this생략가능 -> static이라서 this못씀
			}
			
	4. 다른 클래스에서 싱클톤 호출하기
		클래스명.getInstance();
		
[MVC 패턴]
	1. 목적 : 프로젝트를 설계할때 복잡한 코드와 파일들을 MVC패턴의 따라 구성하는 방법
			- 전문성, 문제파악, 문제해결 등등
			
	2. 정의 : 소프트웨어 개발에서 사용되는 디자인 패턴으로 세가지 주요 역할 분리하고 코드의
	모듈화 와 유지보수성을 높인다
	3. 장점 : 협업, 유지보수 , 모듈화 , 단일기능 제공 등등
	4. 단점 : 분리함으로써 파일이 많아 지므로 파일 관리 복잡도가 높다.
	
		- 소규모 프로그램은 하나의 클래스에서도 가능하지만, 대규모 프로그램은 여러개의 클래스로 운영한다.
			- 클래스에게 각 분리하는 이유는 문제가 발생했을시 유지보수성을 높일 수 있다.
			
		
	5. 세가지 역할 , 레이어/계층
		M(model) : 데이터 관리
			1. 주로 웹/앱 에서는 JAVA 언어 (백엔드)
			2. 데이터베이스(DB/데이터)와 상호작용
			3. 주요 키워드 
				DAO(data access object) : 데이터베이스와 상호작용을 담당하는 객체
				VO	
				DTO(data transfer object) : 서로 다른 레이어/계층 간의 데이터를 이동하는 객체
			4. 관례적인 규칙
				- DAO는 굳이 여러개 객체가 필요없다. - 싱글톤 적용 가능.
				- DTO는 여러개 객체가 필요하다. - 싱글콘 적용 불가능 , 단일객체, 복수객체=배열,Arratlist컬렉션 프레임 워크 사용
				- (console프로젝트) print, scan 함수 불가능 . 단] 개발 테스트 목적으로 사용가능
				
		V(view) : 입출력 담당
			1. 주로 웹/앱 에서는 HTML/CSS/JS언어 (프론트엔드)
			2. 사용자로부터 입력과 출력을 담당
			3. 관례적인 규칙
				-(console프로젝트) : view 클래스에서만 print, scan 함수를 사용 - 데이터베이스 접근 불가능.
		
		C(controller) : Mpdel 과 view 사이의 제어와 전달 및 유효성검사 담당
			1. 주로 웹/앱 에서는 JAVA언어 (백엔드)
			2. 사용자(view)로부터 요청을 받아 model에게 전달하고 결과를 받는다.
			3. 주요 키워드
				MVC1패턴 : controller
				MVC2패턴 3티어 : controller + service
			4. 관례적인 규칙
				- (console프로젝트) print, scan 함수 불가능 . 단] 개발 테스트 목적으로 사용가능	
				- 데이터베이스 접근 불가능
				
				
	6. 세가지 역할 흐름도
		[요청]
		사용자  ---> VIEW --DTO--> CONTROLLER --DTO--> MODEL(DAO)
		
		[응답]
		사용자 < --- VIEW <--DTO--- CONTROLLER <--DTO-- MODEL(DAO)
		
		[주의할점] : 개발자는 위 흐름순서가 다르게 코드 작성이 가능하지만 관례적인 패턴 규칙으로 위 흐름으로 코드를 작성해야한다.
		
		
	[실습 예1]
		- day13 패키지
			-boardprogram8 패키지*
				-controller 패키지*
					-BoardController 클래스    * 싱글톤 o, 입력받은 게시물 정보를 받아  dao에게 전달 담당하는 클래스
				