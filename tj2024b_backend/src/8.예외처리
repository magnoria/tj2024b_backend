[예외처리]
	1. 오류 종류
		1. 시스템적 오류/에러 : 시스템이 종료되는 수준의 시각한 문제
			- 프로그램 개발자가 예측하기 어렵고 제어가 힘든 메모리 관련 오류
		2. 예외 : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생하는 문제
			- 시스템 오류와 달리 예측하여 제어가 가능하다. 경험이 중요시 된다.
	2. 예외 종류
		1. 일반예외 : 컴파일러(번역) 할때 예외 처리 코드 여부를 검사하는 예외, 에디터(이클립스, vscod를말함)에서 알려줌
			- 입출력 예외, 네트워크, 파일, JDBC(JAVA-DB연동) 등등, 주로 외부요소와 통신
		2. 실행예외 : 컴파일러(번역) 할때 예외 처리 코드 여부를 검사하지 않는 예외
			- null, 캐스팅 , 인덱스 등등, 주로 개발자의 경험의 의존성이 크다. 꼼꼼해야한다.
			
	3. 예외 처리 목적 : 비정상적인 프로그램종료방지 , 안전하게 24시간 실행되는 프로그램, 유지보수
	4. 예외 처리 문법 : 
		try{
			예외가 발생 할것 같은(예측)코드
		}catch( 처리할 예외클래스명 변수명){
				예외가 발생했을때 실행코드
		}catch(예외클래스명 변수명) {
				예외가 발생했을때 실행코드
		}finally{
			예외여부 상관없이 무조건 실행코드;
		}
		
		*다중 catch가 가능할때 주의할점 : Exception 사용시 마지막 catch
		
	5. 예외 클래스
		- 예외가 발생했을때 발생 이유와 정보가 저장되는 클래스 타입
		- 문제점을 저장하고 로그처리하여 추후에 유지보수 사용된다.
		1. Exception 클래스 : 예외처리 클래스 중에 슈퍼클래스
			- 일반예외
				- ClassNotFoundException
				- IOException
				등등
			- 실행예외
				-NullPointerException 값이없을때
				-ArrayIndexOutOfBoundsException 인덱스가 없을때
				-InputMismatchException 입력값이 잘못됬을때
				-NumberFormatException 변환불가일때
				등등
				
	6. 예외 떠넘기기/던지기/미루기
		- 여러곳에서 발생하는 예외를 특정한곳에서 한번에 처리할 경우 주로 사용.
		- 메소드에서 발생하는 예외를 메소드를 호출 한 곳으로 예외 보내는 방법, 예외 리턴
		- 예외 던지기 문법
			반환타입 메소드명 (타입 매개변수) throws 예외클래스{
			
			}
			
			
			