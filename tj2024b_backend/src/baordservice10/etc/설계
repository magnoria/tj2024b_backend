[Boardervice10]
주제 : 회원제 커뮤니티

	1. 주제선정
	2. 주요기능들 : 회원기능, 계층형(카테고리) 게시물기능
	3. 세부구현기능들
		- 회원기능 : 회원가입, 로그인, 아이디/비밀번호 찾기, 내정보, 회원탈퇴
		- 게시물기능 : 게시물쓰기 , 전체조회 , 개별조회 , 수정, 삭제
		- 댓글기능 : 쓰기, 현재게시물 댓글조회, 댓글수정, 댓글삭제 -> 설계만함 나중에 웹할때 
		
		
	4. 화면 flow chart
	
	5. DB 설계와 샘플(스프레드시트) --> DB/Table SQL -> SAMPLE INSERT -> ERD다이어그램
		저장 데이터 파악 :
			회원 : 회원번호PK , 아이디, 비밀번호 , 이름 , 연락처 , 가입일
			카테고리 : 카테고리 번호PK, 카테고리명, 작성일
			게시물 : 게시물 번호PK, 제목 , 내용 , 조회수 , 작성일 , 작성자 * 여기에 회원번호 FK, 카테고리명 * 카테고리번호FK
			댓글 : 댓글번호PK, 내용, 작성일 , 작성자 회원번호FK   <-- 연결고리 추가하여 게시물번호FK
		1. 데이터들 간의 관계 파악 , 1:1 , 1(PK):M(FK) , M:M   M-> 다수참조
			(회원)회원번호PK -- (개시물) 회원번호FK[작성자역할]
			(회원)회원번호PK -- (댓글)회원번호FK[작성자역할]
			(카테고리)카테고리번호PK -- (게시물)카테고리번호FK[카ㅏ테고리명 역할]
			(게시물) 게시물번호 PK -- (댓글)게시물번호FK[댓글위치 역할]
		
		2. 테이블당 PK(식별키) 1개 이상 권장
		
			
	
	6. REST API 명세서(스프레드시트) : Controller 매개변수/리턴값 정의서
	7. JAVA 프로젝트 세팅 : 1. 패키지 구성 2. 클래스 구성 3. 싱글톤 구성 4. DB연동코드 5. DTO 생성 6. AppSTART
	8. 기능별 VIEW - CONTROLLER - DAO 코드 작성하기
		0. 그 구현할 기능의 DTO 만들기.
			- DTO : 서로 다른 레이어(MVC패턴)들 간의 데이터를 이동하는 객체
			- 여러가지의 데이터들을 고유하게 가져야 하므로 싱글톤은 필요없다. [사람DTO]
		
		
		0. 각 클래스별 싱글톤.
			- 프로그램내 인스턴스(객체) 1개만 만들 수 있도록 하는 디자인 패턴
			- MVC 에서는 DAO, CONTROLLER , VIEW 사용할 예정이다.
			- 서비스를 제공하는 기능들은 한개만 존재해도 되니까 instance 자체를 하나 만들어놓으면 사용만 하면 되니까
			- 싱글톤 코드 3단계
			
		변수 : 변수명 데이터 값
		메소드: 함수명 동작/행위 기능
			
			
			
														CRUD		DML
		1. 회원가입view - 회원가입controller - 회원가입dao		C			insert
		2. 아이디 찾기 :view -> controller - dao			R			select
		3. 비밀번호 찾기 : view -> controller - dao			R			select
		4. 로그인 : view -> controller - dao				R			select
		5. 로그아웃 : view -> controller					로직			x
		6. 내정보 조회 : view -> controller - dao			R			selevt
		7. 회원탈퇴 : view -> controller - dao				D			delete, 
		8. 회원수정 : view -> controller -dao				U			update
		
		*디자인 패턴이란 : 프로그래밍 설계과정에서 자주 발생되는 무제점을 해결하는 설계방법 제시
		
		